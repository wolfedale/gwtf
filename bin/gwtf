#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'
require 'gwtf'

include GLI

program_desc 'Go With The Flow'

version Gwtf::VERSION

config_file '.gwtf'

desc 'Path to storage directory'
long_desc "Where to store the database of items"
default_value File.join(Etc.getpwuid.dir, ".gwtf.d")
arg_name "data_dir"
flag [:data, :d]

desc 'Active project'
long_desc "Change the active project"
default_value "default"
arg_name "project"
flag [:project, :p]

Gwtf.each_command do |command|
  load command
end

def setup_default(data_dir)
  project_dir = File.join(data_dir, "default")
  Gwtf::Items.setup(project_dir) unless File.directory?(project_dir)
end

pre do |global,command,options,args|
  setup_default(global[:data])

  project_dir = File.join(global[:data], global[:project])

  unless File.directory?(project_dir)
    if command.name == :new || global[:project] == "default"
      puts "Created a new project %s in %s" % [global[:project], project_dir] unless global[:project] == "default"
      Gwtf::Items.setup(project_dir)
    else
      raise "Unknown project %s" % [global[:project]]
    end
  end

  @items = Gwtf::Items.new(project_dir, global[:project])

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
